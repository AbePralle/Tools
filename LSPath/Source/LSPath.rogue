#===============================================================================
# LSPath.rogue
# October 2, 2020 by Abe Pralle
#===============================================================================
$requireRogue "1.7.8"

$define VERSION "1.5"
$define DATE    "June 26, 2021 by Abe Pralle"

uses Utility/CommandLineParser

LSPath( System.command_line_arguments )

class LSPath
  PROPERTIES
    filepaths   = StringTable<<String>>()
    show_hidden = false
    grep        : String[]
    names       : String[]

  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        option( "--esc",    &alias="-e" )
        option( "--grep=",  &alias="-g", &multi )
        option( "--help",   &aliases=["-h","-?"] )
        option( "--hidden", &alias="-a" )
        option( "--name=",  &alias="-n", &multi )
        on_unknown( this=>print_usage )
      ].parse( args )

      if (command//options//help)
        print_usage
        System.exit
      endIf

      show_hidden = command//options//hidden->Logical

      if (not command//args) command.ensure_list( "args" ).add( "**" )

      grep = command//options//grep.to_list<<String>>
      names = command//options//name.to_list<<String>>

      forEach (name in writer=names.rewriter)
        writer.write( "**$**" (name) )
      endForEach

      forEach (arg in command//args.to_list<<String>>)
        if (File.is_folder(arg)) arg = File.ensure_ends_with_separator( arg ) + "**"
        if (File.exists(arg))
          add( arg )
        else
          forEach (filepath in File.listing(arg,&ignore_hidden=not show_hidden))
            add( filepath )
          endForEach
        endIf
      endForEach

      if (command//options//esc)
        println( File.esc(forEach in filepaths) )
      else
        println( forEach in filepaths )
      endIf

    method add( filepath:String )
      if (not show_hidden and File.filename(filepath).begins_with('.')) return
      contingent
        necessary (names.count)
        sufficient (File.matches_wildcard_pattern(filepath,forEach in names,&ignore_case))
        return  # No matching name pattern
      endContingent
      filepath = File.absolute_filepath( filepath )
      if (grep.count)
        if (File.is_folder(filepath)) return
        contingent
          local remaining_grep = grep.cloned
          forEach (line in LineReader(File(filepath)))
            forEach (pattern at index in remaining_grep step -1)
              if (line.contains_pattern(pattern,&ignore_case))
                remaining_grep.remove_at( index )
                sufficient (remaining_grep.is_empty)
              endIf
            endForEach
          endForEach
          return # did not find all patterns
        endContingent
      endIf
      filepaths[ filepath ] = filepath

    method print_usage
      println "=" * 80
      println "LSPath v" + VERSION
      println DATE
      println "=" * 80
      println @|USAGE
               |  lspath <options> [filepath1 filepath2 ...]
               |
               |OPTIONS
               |  --esc, -e
               |    Paths are displayed with spaces and most other symbols escaped. For example
               |    a filepath containing "abc 123" would display as "abc\ 123".
               |
               |  --grep=<pattern>, -g <pattern>
               |    Only prints filepaths of files that contain one or more given patterns.
               |    Despite the name these are "wildcard" patterns, not classic "grep" regular
               |    expressions. Patterns are applied line by line and are not case sensitive.
               |    Example:
               |      lspath --grep="a*z"
               |    prints filepaths of all files containing a line that starts with 'a' and
               |    ends with Z. Specifying multiple grep patterns requires that a file contain
               |    all patterns in order to have its filepath printed.
               |
               |  --help, -h, -?
               |    Print this help text.
               |
               |  --hidden, -a
               |    Show all hidden files.
               |
               |  --name=<name>, -n <name>
               |    Only print filepaths containing the given name pattern. Name comparisions
               |    are case-insensitive. If multiple "--name" directives are given, each
               |    filepath need only match one of the names to be printed. Wildcard names
               |    patterns may be used, e.g. "ABC*.cpp".
               |
               |WILDCARD PATTERNS
               |  Put patterns in quotes to ensure that LSTree's non-standard wildcard patterns
               |  are correctly processed. By example:
               |    "*"            # All files in current folder
               |    "**"           # All files, recursively
               |    "**/*.rogue"   # All .rogue files, recursively
               |  Finally, '?' can be used to match any single character.
               |
               |EXAMPLES
               |  # Show filepaths for all .cpp, and .h files
               |  lspath "**/*.cpp" "**/*.h"
endClass

