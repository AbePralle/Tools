uses Plasmacore

Display( "Main" ).screen = MainScreen

class Area
  PROPERTIES
    bounds : Box

  METHODS
    method init( bounds )

    method draw
      bounds.draw( Color.RED, Display.density*2 )
      DefaultFont.scale = Display.density * 0.75
      if (bounds.width > DefaultFont.height*2.5 and bounds.height > DefaultFont.height)
        DefaultFont.anchor = Anchor.CENTER
        DefaultFont.color = Color.RED
        DefaultFont.draw( ((bounds.size / MainScreen.floor_plan.scale) / MainScreen.pixels_per_foot).product.format(".0") + " SF", bounds )
      endIf

    method sf->Real64
      return ((bounds.size / MainScreen.floor_plan.scale) / MainScreen.pixels_per_foot).product

    method translate( offset:XY )
      bounds += offset

    method update( a:XY, b:XY )
      bounds = Box( a.or_smaller(b), (b-a).abs )
endClass

class MainScreen : Screen [singleton]
  PROPERTIES
    floor_plan : Image
    areas      = Area[]
    pixels_per_foot = 20.8

  METHODS
    method on_start
      floor_plan = Image( "FloorPlan.png" )
      floor_plan.scale_to_fit( Display.size )
      change_state( IdleState() )

    method on( e:KeyEvent )
      if (e.is_press(Keycode.W))
        pixels_per_foot += 0.1
      elseIf (e.is_press(Keycode.S))
        pixels_per_foot -= 0.1
      elseIf (e.is_press(Keycode.ESCAPE))
        areas.clear
      endIf

    method on_draw
      Display.clear( Color.BLACK )
      floor_plan.draw( Display.center )

      local sf = 0
      sf += ((forEach in areas).sf + 0.5).floor
      SystemFont.anchor = Anchor.TOP_LEFT
      SystemFont.scale = Display.density
      SystemFont.draw( "$ Pixels/SF (W,S to change)" (pixels_per_foot.format(".1")), Display.at(0,0) )

      DefaultFont.scale = Display.density * 0.75
      DefaultFont.anchor = Anchor.CENTER
      DefaultFont.color = Color.RED
      local h = DefaultFont.height

      local status_bounds = Box( 0, Display.height-(h+16), Display.width, h+16 )
      local mesg = "$ Total SF" (sf)
      status_bounds.fill( Color.WHITE )
      DefaultFont.draw( mesg, status_bounds )

      (forEach in areas).draw
endClass


class IdleState : ScreenState<<MainScreen>>
  METHODS
    method on( e:PointerEvent )
      if (e.is_press)
        local cur = screen.areas.find( $.bounds.contains(e.position) )
        if (cur)
          change_state( DragState(cur.value) )
        else
          change_state( CreateAreaState(e.position) )
        endIf
      endIf
endClass


class DragState( selection:Area ) : ScreenState<<MainScreen>>
  PROPERTIES
    is_moved = false

  METHODS
    method on( e:PointerEvent )
      if (e.is_move)
        is_moved = true
        selection.translate( e.delta )
      elseIf (e.is_release)
        if (not is_moved) screen.areas.remove( selection )
        change_state( IdleState() )
      endIf
endClass


class CreateAreaState( origin:XY ) : ScreenState<<MainScreen>>
  PROPERTIES
    selection : Area

  METHODS
    method on_start
      selection = Area( Box(origin,0,0) )
      screen.areas.add( selection )

    method on( e:PointerEvent )
      if (e.is_move)
        selection.update( origin, e.position )
      elseIf (e.is_release)
        change_state( IdleState() )
      endIf
endClass

